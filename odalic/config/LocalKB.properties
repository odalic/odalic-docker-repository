#####################################
# COMMON SETTINGS                   #
#####################################
# The name of the knowledge base. Should be unique.
kb.name = Local KB
# The knowledge base type. Determines the chosen implementation.
kb.advancedType = SPARQL

# A file that lists things (e.g., predicate URIs) to be used by an instance of uk.ac.shef.dcs.kbproxy.KBSearchResultFilter, which decides what triples/relations/classes to remove. Specific rules are implemented by subclasses of uk.ac.shef.dcs.kbproxy.KBSearchResultFilter, which should be instantiated as part of uk.ac.shef.dcs.kbproxy.KBProxy.
kb.stopListFile = resources/kbstoplist_dbpedia.txt

# SPARQL endpoint of the knowledge base.
kb.endpoint = http://localhost:8080/fuseki/odalic/query

# Enables fulltext search in the knowledge base. If a query keyword does not match to anything, it tries to split it into parts using "and".
kb.fulltextEnabled = true
# Turns of support for the Virtuoso fulltext search.
kb.useBifContains = true
# The language suffix used in exact string matching and labels of newly added concepts.
kb.languageSuffix = @en
# During initial disambiguation, class restriction is applied to the disambiguated entity. There are two modes, in which the class restriction may be applied. In the standard “indirect” mode, the disambiguated entity must be instance of something, which is a class. In the direct mode, the disambiguated entity can be class itself - this is the case e.g. in case of SKOS schemas, where there are just skos:Concepts.
kb.classTypeMode = indirect
# Predicate used for the "instance of" relationship.
kb.structure.predicate.instanceOf = http://www.w3.org/1999/02/22-rdf-syntax-ns#type
# Predicate used to specify domains of properties.
kb.structure.predicate.domain = http://www.w3.org/2000/01/rdf-schema#domain
# Predicate used to specify ranges of properties.
kb.structure.predicate.range = http://www.w3.org/2000/01/rdf-schema#range

#####################################
# INSERT SETTINGS                   #
#####################################
# Enables inserting new concepts into the knowledge base.
kb.insert.supported = true
# SPARQL endpoint of the knowledge base designated to inserts. If missing, the one used for search is used instead.
kb.insert.endpoint = http://localhost:8080/fuseki/odalic/update
# Prefix used in data elements (instances of classes).
kb.insert.prefix.data = http://odalic.eu/resource/
# Prefix used in schema elements (classes and properties).
kb.insert.prefix.schema = http://odalic.eu/schema/

# Named graph used for new concepts.
kb.insert.graph = odalic.eu

# Default class used in situations, when the class is not specified.
kb.insert.defaultClass = http://www.w3.org/2002/07/owl#Thing
# Predicate used for assigning labels.
kb.insert.predicate.label = http://www.w3.org/2000/01/rdf-schema#label
# Predicate used for assigning alternative labels.
kb.insert.predicate.alternativeLabel = http://www.w3.org/2000/01/rdf-schema#label
# Predicate used for the "subclass of" relationship.
kb.insert.predicate.subclassOf = http://www.w3.org/2000/01/rdf-schema#subClassOf
# Predicate used for the "sub-property of" relationship.
kb.insert.predicate.subPropertyOf = http://www.w3.org/2000/01/rdf-schema#subPropertyOf
# Type used for inserting classes.
kb.insert.type.class = http://www.w3.org/2002/07/owl#Class
# Type used for inserting properties.
kb.insert.type.dataProperty = http://www.w3.org/2002/07/owl#DatatypeProperty
kb.insert.type.objectProperty = http://www.w3.org/2002/07/owl#ObjectProperty
