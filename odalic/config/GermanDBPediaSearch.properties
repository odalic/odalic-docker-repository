#####################################
# COMMON SETTINGS                   #
#####################################
# The template for knowledge base cache.
kb.cacheTemplatePath = empty
# The implementation of knowledge base search. Must extend the uk.ac.shef.dcs.kbproxy.KBProxy. It is responsible for querying the knowledge base.
kb.class = uk.ac.shef.dcs.kbproxy.sparql.DBpediaProxy
# The name of the knowledge base. Should be unique.
kb.name = German DBpedia
# A file that lists things (e.g., predicate URIs) to be used by an instance of uk.ac.shef.dcs.kbproxy.KBSearchResultFilter, which decides what triples/relations/classes to remove. Specific rules are implemented by subclasses of uk.ac.shef.dcs.kbproxy.KBSearchResultFilter, which should be instantiated as part of uk.ac.shef.dcs.kbproxy.KBProxy.
kb.stopListFile = resources/kbstoplist_dbpedia.txt

#####################################
# INSERT SETTINGS                   #
#####################################
# Enables inserting new concepts into the knowledge base.
kb.insert.supported = false

#####################################
# SPARQL SPECIFIC SETTINGS          #
#####################################
# SPARQL endpoint of the knowledge base.
kb.endpoint = http://de.dbpedia.org/sparql
# Lists of predicates for the knowledge base. Multiple configuration files can be separated by the "|".
kb.structure = config/enums/de.dbpedia.properties|config/enums/dc.properties|config/enums/foaf.properties|config/enums/de.dbpedia.rdf.properties|config/enums/de.dbpedia.owl.properties

# Enables fulltext search in the knowledge base. If a query keyword does not match to anything, it tries to split it into parts using "and".
kb.fulltextEnabled = true
# Turns of support for the Virtuoso fulltext search.
kb.useBifContains = true
# The language suffix used in exact string matching and labels of newly added concepts.
kb.languageSuffix = @de
# During initial disambiguation, class restriction is applied to the disambiguated entity. There are two modes, in which the class restriction may be applied. In the standard “indirect” mode, the disambiguated entity must be instance of something, which is a class. In the direct mode, the disambiguated entity can be class itself - this is the case e.g. in case of SKOS schemas, where there are just skos:Concepts.
kb.classTypeMode = indirect
# Predicate used for the "instance of" relationship.
kb.structure.predicate.instanceOf = http://www.w3.org/1999/02/22-rdf-syntax-ns#type
# Predicate used to specify domains of properties.
kb.structure.predicate.domain = http://www.w3.org/2000/01/rdf-schema#domain
# Predicate used to specify ranges of properties.
kb.structure.predicate.range = http://www.w3.org/2000/01/rdf-schema#range